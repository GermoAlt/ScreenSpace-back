openapi: 3.0.0
info:
  title: ScreenSpace API
  version: 1.0.1
  description: API for ScreenSpace cinema application
servers:
  - url: https://screenspace.com/api/v1/

paths:
  /register:
    post:
      summary: Register a new user
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  format: email
                password:
                  type: string
                  format: password
      responses:
        200:
          description: User successfully registered
      tags:
        - Authentication
  /login:
    post:
      summary: Login user
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  format: email
                password:
                  type: string
                  format: password
      responses:
        200:
          description: User logged in successfully
      tags:
        - Authentication
  /forgot_password:
    post:
      summary: Request password reset email
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  format: email
      responses:
        200:
          description: Password reset email sent
      tags:
        - Authentication
  /cinemas:
    get:
      summary: Get list of cinemas
      responses:
        200:
          description: List of cinemas
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Cinema'
      tags:
        - Cinemas
    post:
      summary: Add new cinema
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Cinema'
      responses:
        200:
          description: Cinema added successfully
      tags:
        - Cinemas
  /cinemas/{cinema_id}:
    parameters:
      - name: cinema_id
        in: path
        required: true
        description: ID of cinema to delete
        schema:
          type: integer

    get:
      summary: Get cinema details by ID
      responses:
        200:
          description: Cinema details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Cinema'
      tags:
        - Cinemas

    put:
      summary: Update cinema details by ID
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Cinema'
      responses:
        200:
          description: Cinema details updated successfully
      tags:
        - Cinemas
    delete:
      summary: Delete cinema by ID
      responses:
        200:
          description: Cinema deleted successfully
      tags:
        - Cinemas

  /cinemas/{cinema_id}/screens:
    parameters:
      - name: cinema_id
        in: path
        required: true
        description: ID of cinema
        schema:
          type: integer

    get:
      summary: Get list of screens for cinema
      responses:
        200:
          description: List of screens
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Screen'
      tags:
        - Screens

    post:
      summary: Add new screen to cinema
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Screen'
      responses:
        200:
          description: Screen added successfully
      tags:
        - Screens


  /cinemas/screens/{screen_id}:
    parameters:
      - name: screen_id
        in: path
        required: true
        description: ID of screen
        schema:
          type: integer

    delete:
      summary: Delete screen by ID
      responses:
        200:
          description: Screen deleted successfully
      tags:
        - Screens

  /screenings:
    get:
      summary: Search screenings
      parameters:
        - in: query
          name: cinema
          required: false
          schema:
            type: integer
        - in: query
          name: movieTitle
          required: false
          schema:
            type: string
        - in: query
          name: genre
          required: false
          schema:
            type: string
        - in: query
          name: score
          required: false
          schema:
            type: string #placeholder for now, we'll define it later
          #how should we send the gps location?
      responses:
        200:
          description: List of found screenings
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Screening'
      tags:
        - Screenings

  /movies:
    get:
      summary: Get list of movies
      responses:
        200:
          description: List of movies
      tags:
        - Movies

  /reservations:
    post:
      summary: Adds new reservation
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Reservation'
      responses:
        200:
          description: Reservation added successfully
      tags:
        - Reservations

components:
  schemas:
    Owner:
      type: object
      required:
        - email
        - password
      properties:
        email:
          type: string
          format: email
          description: The email address of the owner.
        password:
          type: string
          description: The password of the owner.

    Cinema:
      type: object
      required:
        - name
        - address
        - geoLocation
        - owner
        - pricePerFunction
      properties:
        name:
          type: string
          description: The name of the cinema.
        address:
          $ref: '#/components/schemas/Address'
        geoLocation:
          $ref: '#/components/schemas/GeoLocation'
        owner:
          $ref: '#/components/schemas/Owner'
        pricePerFunction:
          type: number
          format: double
          description: The price per function in the cinema.
        screeningsByDay:
          type: array
          items:
            $ref: '#/components/schemas/ScreeningsByDay'

    Screen:
      type: object
      properties:
        name:
          type: string
          description: Name of the screen
        seatsLayout:
          $ref: '#/components/schemas/SeatsLayout'
        isTemporarilyClosed:
          type: boolean
          description: Indicates if the screen is temporarily closed.

    Address:
      type: object
      required:
        - street
        - number
        - neighborhood
        - city
        - province
        - country
      properties:
        street:
          type: string
          description: The street of the address.
        number:
          type: string
          description: The number of the address.
        neighborhood:
          type: string
          description: The neighborhood of the address.
        city:
          type: string
          description: The city of the address.
        province:
          type: string
          description: The province of the address.
        country:
          type: string
          description: The country of the address.

    GeoLocation:
      type: object
      required:
        - latitude
        - longitude
      properties:
        latitude:
          type: number
          format: double
          description: The latitude of the geolocation.
        longitude:
          type: number
          format: double
          description: The longitude of the geolocation.

    SeatsLayout:
      type: object
      required:
        - numRows
        - numColumns
      properties:
        numRows:
          type: integer
          description: The number of rows in the seats layout.
        numColumns:
          type: integer
          description: The number of columns in the seats layout.

    ScreeningsByDay:
      type: object
      required:
        - date
        - screenings
      properties:
        date:
          type: string
          format: date
          description: The date of the movies.
        screenings:
          type: array
          items:
            $ref: '#/components/schemas/Screening'

    Screening:
      type: object
      properties:
        screen:
          $ref: '#/components/schemas/Screen'
        movie:
          type: object
          items:
            $ref: '#/components/schemas/Movie'
        seatsReserved:
          type: object
          items:
            $ref: '#/components/schemas/SeatReserved'
        date:
          type: string
          format: date
          description: date of screening

    Movie:
      type: object
      required:
        - title
        - image
        - genre
        - synopsis
        - rating
      properties:
        title:
          type: string
          description: The title of the movie.
        image:
          type: string
          format: uri
          description: The URI of the image of the movie.
        genre:
          type: string
          description: The genre of the movie.
        synopsis:
          type: string
          description: The synopsis of the movie.
        rating:
          type: number
          format: double
          description: The rating of the movie.

    SeatReserved:
      type: object
      required:
        - seatRow
        - seatColumn
      properties:
        seatRow:
          type: number
          description: The number of row reserved
        seatColumn:
          type: number
          description: The number of column reserved

    Reservation:
      type: object
      required:
        - cinema
        - screening
        - seatsReserved
        #need to add user as soon as we define it
      properties:
        code:
          type: number
          description: reservation code
        cinema:
          $ref: '#/components/schemas/Cinema'
        screening:
          $ref: '#/components/schemas/Screening'
        seatsReserved:
          type: object
          items:
            $ref: '#/components/schemas/SeatReserved'